
buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.9'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

jacoco {
    toolVersion = "0.8.7"
}


group = 'com.seproject'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Common
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.navercorp.lucy:lucy-xss-servlet:2.0.0'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // Authentication & Authorization
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    implementation group: 'org.apache.commons', name: 'commons-email', version: '1.5'

    // Data Access
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}"
    implementation 'org.hibernate.validator:hibernate-validator-annotation-processor:8.0.1.Final'
    testImplementation 'com.h2database:h2:2.1.214'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // Docs
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

tasks.test {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
    outputs.dir snippetsDir
}

tasks.named('asciidoctor') { // (2)
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'

    sources { //(2)-2
        include '**/index.adoc'
    }
    baseDirFollowsSourceFile() // (2)-3
    dependsOn test
}

bootJar { // (3)
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

tasks.jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled false
        csv.enabled false
    }

    def Qdomains = []
    for (qPattern in "**/QA".."**/QZ") {
        Qdomains.add(qPattern + "*")
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: ["**/*ProjectApplication*",
                                                "**/*Config*",
                                                "**/*DTO*",
                                                "**/*Dto*",
                                                "**/*Command*",
                                                "**/*ControllerAdvice*",
                                                "**/*Exception*",
                                                "**/*Condition*",
                                                "**/*Init*",
                                                "**/*BaseTime**",
                                                "**/*Response*.*",
                                                "**/*Request*.*",
                                                "**/*Builder*.*",
                                                "**/*Handler*.*",
                                                "**/*OAuth2*.*",
                                                "**/*Oidc*.*",
                                                "**/*File*.*",
                                                "**/*Email*.*",
                                                "**/*DeSerializer*.*",
                                                "**/*Serializer*.*",
                                                "**/*HTMLCharacterEscapes*.*",
                    ] + Qdomains)
                }))
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

tasks.jacocoTestCoverageVerification {
    def Qdomains = []

    for (qPattern in 'A'..'Z') {
        Qdomains.add("*.Q${qPattern}*")
    }

    afterEvaluate {

        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: ["**/*ProjectApplication*",
                                                "**/*Config*",
                                                "**/*DTO*",
                                                "**/*Dto*",
                                                "**/*Command*",
                                                "**/*ControllerAdvice*",
                                                "**/*Exception*",
                                                "**/*Condition*",
                                                "**/*Init*",
                                                "**/*BaseTime**",
                                                "**/*Response*.*",
                                                "**/*Request*.*",
                                                "**/*Builder*.*",
                                                "**/*Handler*.*",
                                                "**/*OAuth2*.*",
                                                "**/*Oidc*.*",
                                                "**/*File*.*",
                                                "**/*Email*.*",
                                                "**/*DeSerializer*.*",
                                                "**/*Serializer*.*",
                                                "**/*HTMLCharacterEscapes*.*",
                    ] + Qdomains)
                }))
    }


    violationRules {
        rule {
            enabled = true // 활성화
            element = 'CLASS' // 클래스 단위로 커버리지 체크

            excludes = ["**/*Request*.*",
                        "**/*Response*.*",
                        "**/*Command*.*"
            ] + Qdomains
        }

    }
}



def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
//queryds
